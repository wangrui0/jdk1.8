     到目前为止，你见到过的终端操作都是返回一个boolean（allMatch之类的）、void
（forEach）或Optional对象（findAny等）。你也见过了使用collect来将流中的所有元素组
合成一个List。
     在本节中，你将看到如何把一个流中的元素组合起来，使用reduce操作来表达更复杂的查
询，比如“计算菜单中的总卡路里”或“菜单中卡路里最高的菜是哪一个”。此类查询需要将流
中所有元素反复结合起来，得到一个值，比如一个Integer。这样的查询可以被归类为归约操作
（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操
作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。
   归约方法的优势与并行化
相比于前面写的逐步迭代求和，使用reduce的好处在于，这里的迭代被内部迭代抽象掉
了，这让内部实现得以选择并行执行reduce操作。而迭代式求和例子要更新共享变量sum，
这不是那么容易并行化的。如果你加入了同步，很可能会发现线程竞争抵消了并行本应带来的
性能提升！这种计算的并行化需要另一种办法：将输入分块，分块求和，最后再合并起来。但
这样的话代码看起来就完全不一样了。你在第7章会看到使用分支/合并框架来做是什么样子。
但现在重要的是要认识到，可变的累加器模式对于并行化来说是死路一条。你需要一种新的模
式，这正是reduce所提供的。你还将在第7章看到，使用流来对所有的元素并行求和时，你的
代码几乎不用修改：stream()换成了parallelStream()。
int sum = numbers.parallelStream().reduce(0, Integer::sum);
但要并行执行这段代码也要付一定代价，我们稍后会向你解释：传递给reduce的Lambda
不能更改状态（如实例变量），而且操作必须满足结合律才可以按任意顺序执行。
  到目前为止，你看到了产生一个Integer的归约例子：对流求和、流中的最大值，或是流中
元素的个数。你将会在5.6节看到，诸如sum和max等内置的方法可以让常见归约模式的代码再简
洁一点儿。我们会在下一章中讨论一种复杂的使用collect方法的归约。例如，如果你想要按类
型对菜肴分组，也可以把流归约成一个Map而不是Integer。
流操作：无状态和有状态
你已经看到了很多的流操作。乍一看流操作简直是灵丹妙药，而且只要在从集合生成流的
时候把Stream换成parallelStream就可以实现并行。
当然，对于许多应用来说确实是这样，就像前面的那些例子。你可以把一张菜单变成流，
用filter选出某一类的菜肴，然后对得到的流做map来对卡路里求和，最后reduce得到菜单
的总热量。这个流计算甚至可以并行进行。但这些操作的特性并不相同。它们需要操作的内部
状态还是有些问题的。
   诸如map或filter等操作会从输入流中获取每一个元素，并在输出流中得到0或1个结果。
这些操作一般都是无状态的：它们没有内部状态（假设用户提供的Lambda或方法引用没有内
部可变状态）。
但诸如reduce、sum、max等操作需要内部状态来累积结果。在上面的情况下，内部状态
很小。在我们的例子里就是一个int或double。不管流中有多少元素要处理，内部状态都是
有界的。
相反，诸如sort或distinct等操作一开始都和filter和map差不多——都是接受一个
流，再生成一个流（中间操作），但有一个关键的区别。从流中排序和删除重复项时都需要知
道先前的历史。例如，排序要求所有元素都放入缓冲区后才能给输出流加入一个项目，这一操
作的存储要求是无界的。要是流比较大或是无限的，就可能会有问题（把质数流倒序会做什么
呢？它应当返回最大的质数，但数学告诉我们它不存在）。我们把这些操作叫作有状态操作。
   你现在已经看到了很多流操作，可以用来表达复杂的数据处理查询。表5-1总结了迄今讲过
的操作。你可以在下一节中通过一个练习来实践一下。
操 作 类 型 返回类型 使用的类型/函数式接口 函数描述符
filter 中间 Stream<T> Predicate<T> T -> boolean
distinct 中间
(有状态无界)
Stream<T>
skip 中间
(有状态有界)
Stream<T> long
limit 中间
(有状态有界)
Stream<T> long
map 中间 Stream<R> Function<T, R> T -> R
flatMap 中间 Stream<R> Function<T, Stream<R>> T -> Stream<R>
sorted 中间
(有状态无界)
Stream<T> Comparator<T> (T, T) -> int
anyMatch 终端 boolean Predicate<T> T -> boolean
noneMatch 终端 boolean Predicate<T> T -> boolean
allMatch 终端 boolean Predicate<T> T -> boolean
findAny 终端 Optional<T>
findFirst 终端 Optional<T>
forEach 终端 void Consumer<T> T -> void
collect 终端 R Collector<T, A, R>
reduce 终端
(有状态有界)
Optional<T> BinaryOperator<T> (T, T) -> T
count 终端 long